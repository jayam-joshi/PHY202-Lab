{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"CL_LAB3_20174008","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyNq88/PYHSEqc/WK7KkPM+C"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["## ***Q1***"],"metadata":{"id":"NjQ6JwO0UIf7"}},{"cell_type":"code","execution_count":21,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QRTGmHtY-hew","executionInfo":{"status":"ok","timestamp":1642752637256,"user_tz":-330,"elapsed":5153,"user":{"displayName":"Jayam Joshi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiW-Wr6pB7Gat1WRP2rP1tdK_EZK26yE56NOpb1=s64","userId":"09291847420595488640"}},"outputId":"1debe381-86e7-495d-dc69-29d128ab51cf"},"outputs":[{"output_type":"stream","name":"stdout","text":["Enter fractional decimal number:\n","7.25\n","Enter precision\n","6\n","Binary of the decimal fraction 111.010000\n"]}],"source":["def to_binary(n, sign_digits): \n","\n","    binary = \"\"         \n","    n_i = int(n)                      ## Integer part of n\n","    n_f = n - n_i                     ## Fractional part of n\n","\n","    #to convert an integral part to binary equivalent\n","    while (n_i):\n","        d = n_i % 2      ## Storing remainder with 2 as digit\n","        binary += str(d)  \n","        n_i //= 2        ## dividing numbr by 2 until it beomes zero \n","\n","    binary = binary[ : : -1]          ## Reverse the string to get final binary representaion of Integer part\n","    binary += '.'                     ## Place decimal point\n","\n","    #to convert an fractional part to binary equivalent\n","    while (sign_digits):\n","        n_f *= 2                      ## Multiplying fractional part n_f by 2\n","        d = int(n_f)                  \n","        if (d == 1) :                 ## Storing integr part of n_f as digit               \n","            n_f -= d                  ## Updating n_f as fractional part of n_f\n","            binary += '1'\n","        else : \n","            binary += '0'\n","        sign_digits -= 1\n","    return binary  \n","\n","print(\"Enter fractional decimal number:\")         ### Takng input\n","n = float(input())\n","print('Enter precision')\n","N = int(input())\n","\n","print(\"Binary of the decimal fraction\", to_binary(n,N))"]},{"cell_type":"markdown","source":["## ***Q2***"],"metadata":{"id":"QRncrcO0ejgM"}},{"cell_type":"code","source":["\n","import numpy as np\n","\n","def to_float32(n):\n","\n","  ans = ''\n","  \n","  # Allocation of sign bit,\n","  if(n>0):\n","    ans = ans + '0'\n","  else:\n","    ans = ans + '1'\n","    n = -n\n"," \n","  temp = int(n)\n","  e = 0\n","  # Obtaining value of exponent in decimal\n","\n","  while temp>1:\n","    temp //= 2\n","    e += 1\n","\n","  # Adding Bias '127' to exponent for Float_32 representation\n","  exponent = e + 127\n","  # COnverting to Binary\n","  exponent = int(float(to_binary(exponent,0)))\n","\n","  ans = ans + str(exponent)\n","  \n","  #obtaining value of mantissa\n","  m = to_binary(n,23-e)\n","  mantissa = m[1:e] + m[e+2:]\n","\n","  ans = ans + mantissa\n","\n","  return ans\n","\n","print(to_float32(-7.125))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"a2PlvfDFLcAQ","executionInfo":{"status":"ok","timestamp":1642753950470,"user_tz":-330,"elapsed":405,"user":{"displayName":"Jayam Joshi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiW-Wr6pB7Gat1WRP2rP1tdK_EZK26yE56NOpb1=s64","userId":"09291847420595488640"}},"outputId":"d2299e59-97b8-4b88-9976-601b5d9a7d20"},"execution_count":26,"outputs":[{"output_type":"stream","name":"stdout","text":["1100000011001000000000000000000\n"]}]},{"cell_type":"code","source":[""],"metadata":{"id":"AQmYVvbHntt3"},"execution_count":null,"outputs":[]}]}